pragma solidity ^0.8.13;

contract WorkAgreement {
  enum State {
    PENDING,
    ACCEPTED,
    CANCELLED 
  }

	struct Agreement {
    address issuer;
		address recipient;
		uint startDate;
		uint endDate;
    bytes32 role; // bytes 32 string, assume ENUM? to keep simple?
		bytes32 salaryFromHash; // hash(secretEmpr, salary)
		// bytes32 salaryToHash; // hash(secretEmpe, salary)
		State state; // did employee accepted
	}

	struct Proposal {
		address recipient;
		uint startDate;
		uint endDate;
    bytes32 role; // bytes 32 string, assume ENUM? to keep simple?
		bytes32 salaryFromHash; // hash(secretEmpr, salary)
	}

	mapping(address -> mapping(address -> uint)) pairToId;
	mapping(address -> uint[]) liveIds; // list of parties agreements were issued to

	mapping(uint -> Agreement) agreements;
  nextId = 1;

	constructor();

	function proposeAgreement(Proposal proposal) external returns (uint newId) {
    Agreement memory newAgreement = new Agreement({
      issuer: msg.sender,
      recipient: proposal.recipient,
      startDate: proposal.startDate,
      endDate: proposal.endDate,
      role: proposal.role, 
      salaryFromHash: proposal.salaryFromHash, 
      state: State.PENDING 
    });

    newId = nextId++;
    pairToId[msg.sender][agreement.recipient] = newId;
    agreements[newId] = newAgreement;
	}

  function acceptAgreement(uint id) {
    Agreement memory pendingAgreement = agreements[id];
    require(
      pendingAgreement.recipient == msg.sender, 
      "only recipient can accept"
    );

    agreements[id].state = State.ACCEPTED;
    liveIds.push(id);
	}

  function cancelAgreement(uint idToCancel) {
    Agreement memory pendingAgreement = agreements[id];
    require(
      pendingAgreement.recipient == msg.sender || pendingAgreement.issuer == msg.sender, 
      "only issuer and recipient can cancel"
    );

    agreements[idToCancel].state = State.CANCELLED;
    uint liveLen = liveIds[pendingAgreement.issuer].length;
    bool removed;
    for (uint i; i < liveLen; i++) {
      if (liveIds[pendingAgreement.issuer][i] == idToCancel) {
        liveIds[pendingAgreement.issuer][i] = liveIds[pendingAgreement.issuer][liveLen-1];
        liveIds[pendingAgreement.issuer].pop();
        removed = true;
        break;
      }
    }

    require(removed, "agreement does not exist");

  }

}
